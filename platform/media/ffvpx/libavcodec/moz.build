# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Due to duplicate file names, we compile libavcodec/x86 in its own
# moz.build file.
if CONFIG['FFVPX_ASFLAGS']:
    if CONFIG['CPU_ARCH'].startswith('x86'):
        DIRS += ['x86']
    elif CONFIG['CPU_ARCH'].startswith('arm'):
        DIRS += ['arm']

if CONFIG['CPU_ARCH'] == 'aarch64':
    DIRS += ['aarch64']

SharedLibrary('mozavcodec')
SOURCES += [
    'allcodecs.c',
    'avcodec.c',
    'avfft.c',
    'avpacket.c',
    'bitstream.c',
    'bitstream_filters.c',
    'bsf.c',
    'codec_desc.c',
    'codec_par.c',
    'decode.c',
    'encode.c',
    'flac.c',
    'flac_parser.c',
    'flacdata.c',
    'flacdec.c',
    'flacdsp.c',
    'get_buffer.c',
    'golomb.c',
    'h264pred.c',
    'imgconvert.c',
    'log2_tab.c',
    'mathtables.c',
    'null_bsf.c',
    'options.c',
    'parser.c',
    'parsers.c',
    'profiles.c',
    'pthread.c',
    'pthread_frame.c',
    'pthread_slice.c',
    'qsv_api.c',
    'raw.c',
    'refstruct.c',
    'reverse.c',
    'utils.c',
    'version.c',
    'videodsp.c',
    'vlc.c',
    'vorbis_parser.c',
    'vp8.c',
    'vp8_parser.c',
    'vp8data.c',
    'vp8dsp.c',
    'vp9.c',
    'vp9_parser.c',
    'vp9_superframe_split_bsf.c',
    'vp9block.c',
    'vp9data.c',
    'vp9dsp.c',
    'vp9dsp_10bpp.c',
    'vp9dsp_12bpp.c',
    'vp9dsp_8bpp.c',
    'vp9lpf.c',
    'vp9mvs.c',
    'vp9prob.c',
    'vp9recon.c',
    'vpx_rac.c',
    'xiph.c'
]

# When building debug, there's a linker symbol inclusion issue, requiring us to
# include dummy function definitions to have symbols exposed.
# See discussion in UXP issue #2725
if CONFIG['MOZ_DEBUG']:
    SOURCES += [
        'dummy_funcs.c',
    ]

SYMBOLS_FILE = 'avcodec.symbols'
NO_VISIBILITY_FLAGS = True

if CONFIG['GNU_CXX']:
  CXXFLAGS += ['-Wno-attributes']

# GCC 10 defaults -fno-common, we don't care to solve this "properly" yet
# so use GCC < 10 behavior.
if CONFIG['GNU_CC'] and CONFIG['CC_VERSION'] >= '10.0.0':
    CFLAGS += ['-fcommon']

USE_LIBS += [
     'mozavutil'
]

include("../ffvpxcommon.mozbuild")
